name: Build DocuSafely Desktop - All Platforms

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'              # Triggers on version tags like v1.0.0
      - '*-*'             # Triggers on tags like 1.0.0-1, version-build.number
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # ====================
  # Build Python Backends
  # ====================
  
  build-backend-windows:
    name: Build Backend - Windows
    runs-on: windows-latest
    
    steps:
      - name: Checkout docusafely_core
        uses: actions/checkout@v4
        with:
          repository: hielf/docusafely_core
          path: docusafely_core
          token: ${{ secrets.PAT_TOKEN || github.token }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: docusafely_core/requirements.txt
      
      - name: Install Python dependencies
        working-directory: docusafely_core
        run: |
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Build Windows backend with PyInstaller
        working-directory: docusafely_core
        run: python build_executable.py
      
      - name: Upload Windows backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-windows
          path: docusafely_core/dist/processor.exe
          retention-days: 7

  build-backend-macos:
    name: Build Backend - macOS
    runs-on: macos-latest
    
    steps:
      - name: Checkout docusafely_core
        uses: actions/checkout@v4
        with:
          repository: hielf/docusafely_core
          path: docusafely_core
          token: ${{ secrets.PAT_TOKEN || github.token }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: docusafely_core/requirements.txt
      
      - name: Install Python dependencies
        working-directory: docusafely_core
        run: |
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Build macOS backend with PyInstaller
        working-directory: docusafely_core
        run: python build_executable.py
      
      - name: Upload macOS backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-macos
          path: docusafely_core/dist/processor
          retention-days: 7

  build-backend-linux:
    name: Build Backend - Linux
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout docusafely_core
        uses: actions/checkout@v4
        with:
          repository: hielf/docusafely_core
          path: docusafely_core
          token: ${{ secrets.PAT_TOKEN || github.token }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: docusafely_core/requirements.txt
      
      - name: Install Python dependencies
        working-directory: docusafely_core
        run: |
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Build Linux backend with PyInstaller
        working-directory: docusafely_core
        run: python build_executable.py
      
      - name: Upload Linux backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-linux
          path: docusafely_core/dist/processor
          retention-days: 7

  # ====================
  # Build Desktop Apps
  # ====================

  build-windows:
    name: Build Desktop - Windows
    needs: build-backend-windows
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version from tag
        shell: bash
        run: |
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(grep '"version"' package.json | cut -d'"' -f4)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"
      
      - name: Update package.json version
        shell: bash
        run: |
          CURRENT_VERSION=$(grep '"version"' package.json | cut -d'"' -f4)
          if [ "$CURRENT_VERSION" != "$VERSION" ]; then
            npm version $VERSION --no-git-tag-version
            echo "Updated package.json from $CURRENT_VERSION to $VERSION"
          else
            echo "Package.json version $VERSION already matches tag version"
          fi
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Download Windows backend
        uses: actions/download-artifact@v4
        with:
          name: backend-windows
          path: backend/dist
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Build Windows desktop app
        run: npm run build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: |
            dist/*.exe
            dist/*.zip
          retention-days: 30

  build-macos:
    name: Build Desktop - macOS
    needs: build-backend-macos
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version from tag
        shell: bash
        run: |
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(grep '"version"' package.json | cut -d'"' -f4)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"
      
      - name: Update package.json version
        shell: bash
        run: |
          CURRENT_VERSION=$(grep '"version"' package.json | cut -d'"' -f4)
          if [ "$CURRENT_VERSION" != "$VERSION" ]; then
            npm version $VERSION --no-git-tag-version
            echo "Updated package.json from $CURRENT_VERSION to $VERSION"
          else
            echo "Package.json version $VERSION already matches tag version"
          fi
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Download macOS backend
        uses: actions/download-artifact@v4
        with:
          name: backend-macos
          path: backend/dist
      
      - name: Make backend executable
        run: chmod +x backend/dist/processor
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Build macOS desktop app
        run: npm run build:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-installers
          path: |
            dist/*.dmg
            dist/*.zip
          retention-days: 30

  build-linux:
    name: Build Desktop - Linux
    needs: build-backend-linux
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract version from tag
        shell: bash
        run: |
          if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(grep '"version"' package.json | cut -d'"' -f4)
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"
      
      - name: Update package.json version
        shell: bash
        run: |
          CURRENT_VERSION=$(grep '"version"' package.json | cut -d'"' -f4)
          if [ "$CURRENT_VERSION" != "$VERSION" ]; then
            npm version $VERSION --no-git-tag-version
            echo "Updated package.json from $CURRENT_VERSION to $VERSION"
          else
            echo "Package.json version $VERSION already matches tag version"
          fi
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Download Linux backend
        uses: actions/download-artifact@v4
        with:
          name: backend-linux
          path: backend/dist
      
      - name: Make backend executable
        run: chmod +x backend/dist/processor
      
      - name: Install npm dependencies
        run: npm ci
      
      - name: Build Linux desktop app
        run: npm run build:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-installers
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
          retention-days: 30

  # ====================
  # Create Release (on tags)
  # ====================

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Display downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -R artifacts/
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/windows-installers/*
            artifacts/macos-installers/*
            artifacts/linux-installers/*
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
          generate_release_notes: true
          body: |
            ## 🚀 DocuSafely Desktop Release
            
            ### 📦 Downloads
            
            **Windows:**
            - `DocuSafely-Setup-*.exe` - Windows installer
            
            **macOS:**
            - `DocuSafely-*-arm64.dmg` - macOS disk image (Apple Silicon)
            - `DocuSafely-*-arm64-mac.zip` - macOS portable app
            
            **Linux:**
            - `DocuSafely-*.AppImage` - Universal Linux app
            - `DocuSafely-*.deb` - Debian/Ubuntu package
            - `DocuSafely-*.rpm` - RedHat/Fedora package
            
            ### 📋 Release Notes
            
            Built automatically from commit: ${{ github.sha }}
            
            ---
            
            *Full changelog below*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

